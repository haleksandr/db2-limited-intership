{"version":3,"sources":["store/types.js","store/actions/actions.js","Components/TaskList/TaskListItem/TaskListItem.jsx","Components/TaskList/NewTask/NewTask.jsx","Components/TaskList/TaskList.jsx","App.js","store/reducers/todoReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["ADD_NEW_TASK","TOGGLE_DONE_TASK","UPDATE_NEW_TASK","DELETE_TASK","SET_QUERY","updateNewTaskAC","newTaskText","type","types","payload","addNewTaskAC","TaskListItem","props","dispatch","useDispatch","className","classNames","done","labelTask","onClick","id","NewTask","useSelector","state","todo","required","onChange","e","target","value","placeholder","onKeyDown","event","key","length","alert","TaskList","tasksData","map","item","index","App","initialState","todoReducer","action","newTask","Math","floor","random","numIndex","parseInt","filter","task","searchQuery","rootReducer","combineReducers","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45970daa.chunk.js","sourcesContent":["export const ADD_NEW_TASK = 'ADD_NEW_TASK';\nexport const TOGGLE_DONE_TASK = 'TOGGLE_DONE_TASK';\nexport const UPDATE_NEW_TASK = 'UPDATE_NEW_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const SET_QUERY = 'SET_QUERY';\n","/* eslint-disable */\nimport * as types from '../types';\n\nexport const updateNewTaskAC = (newTaskText) => {\n  return {\n    type: types.UPDATE_NEW_TASK,\n    payload: newTaskText,\n  };\n};\n\nexport const addNewTaskAC = (newTaskText) => {\n  return {\n    type: types.ADD_NEW_TASK,\n    payload: newTaskText,\n  };\n};\n\nexport const toggleDoneTaskAC = (id) => {\n  return {\n    type: types.TOGGLE_DONE_TASK,\n    payload: id,\n  };\n};\n\nexport const deleteTaskAC = (id) => {\n  return {\n    type: types.DELETE_TASK,\n    payload: id,\n  };\n};\n","/* eslint-disable */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\n\nimport './TaskListItem.scss';\nimport { toggleDoneTaskAC, deleteTaskAC } from '../../../store/actions/actions';\n\nconst TaskListItem = (props) => {\n  const dispatch = useDispatch();\n\n  const toggleStatusTask = () => {\n    dispatch(toggleDoneTaskAC(props.id));\n  };\n\n  const deleteTask = () => {\n    dispatch(deleteTaskAC(props.id));\n  };\n\n  return (\n    <div className=\"todo__task-list-item\">\n      <p className={classNames(props.className, { done: props.done })}>{props.labelTask}</p>\n      <div>\n        <button className=\"btn btn-done\" onClick={toggleStatusTask}>\n          DONE\n        </button>\n        <button className=\"btn btn-delete\" onClick={deleteTask}>\n          DELETE\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskListItem;\n","/* eslint-disable */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './NewTask.scss';\nimport { updateNewTaskAC, addNewTaskAC } from '../../../store/actions/actions';\n\nconst NewTask = () => {\n  const dispatch = useDispatch();\n  const newTaskText = useSelector((state) => state.todo.newTaskText);\n\n  const handleChange = (e) => {\n    let newTaskText = e.target.value;\n    dispatch(updateNewTaskAC(newTaskText));\n  };\n\n  const addNewTask = () => {\n    if (newTaskText.length < 1) {\n      alert('FIELD IS EMPTY');\n    } else {\n      dispatch(addNewTaskAC(newTaskText));\n      dispatch(updateNewTaskAC(''));\n    }\n  };\n\n  const addNewTaskInp = (event) => {\n    if (event.key === 'Enter' && newTaskText.length >= 1) {\n      dispatch(addNewTaskAC(newTaskText));\n      dispatch(updateNewTaskAC(''));\n    }\n  };\n\n  return (\n    <div className=\"todo__new-task\">\n      <input\n        required\n        className=\"fieldNewTask\"\n        type=\"text\"\n        onChange={handleChange}\n        placeholder=\"Enter your task here\"\n        value={newTaskText}\n        onKeyDown={addNewTaskInp}\n      />\n      <button className=\"buttonNewTask\" onClick={addNewTask}>\n        ADD NEW TASK\n      </button>\n    </div>\n  );\n};\n\nexport default NewTask;\n","/* eslint-disable */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './TaskList.scss';\nimport TaskListItem from './TaskListItem/TaskListItem';\nimport NewTask from './NewTask/NewTask';\n\nconst TaskList = (props) => {\n  const tasksData = useSelector((state) => state.todo.tasksData);\n\n  return (\n    <div>\n      <NewTask />\n      <ul className=\"todo__tasks\">\n        {tasksData.map((item, index) => (\n          <li key={index}>\n            <TaskListItem labelTask={item.labelTask} id={item.id} done={item.done} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TaskList;\n","/* eslint-disable */\nimport React from 'react';\nimport './App.css';\nimport TaskList from './Components/TaskList/TaskList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"todo\">\n        <TaskList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\nimport * as types from '../types';\n\nconst initialState = {\n  tasksData: [],\n  newTaskText: '',\n};\n\nconst todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.UPDATE_NEW_TASK:\n      return {\n        ...state,\n        newTaskText: action.payload,\n      };\n    case types.ADD_NEW_TASK:\n      let newTask = {\n        id: Math.floor(Math.random() * 1000),\n        labelTask: action.payload,\n        done: false,\n      };\n      return {\n        ...state,\n        tasksData: [...state.tasksData, newTask],\n      };\n    case types.TOGGLE_DONE_TASK:\n      return {\n        ...state,\n        tasksData: state.tasksData.map((todo) => (todo.id === action.payload ? { ...todo, done: !todo.done } : todo)),\n      };\n    case types.DELETE_TASK:\n      const numIndex = parseInt(action.payload);\n      return {\n        ...state,\n        tasksData: state.tasksData.filter((task) => {\n          return task.id !== numIndex;\n        }),\n      };\n    case types.SET_QUERY:\n      return {\n        ...state,\n        searchQuery: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","import { combineReducers } from 'redux';\nimport todoReducer from './todoReducer';\n\nconst rootReducer = combineReducers({\n  todo: todoReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers/index';\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default store;\n","/* eslint-disable */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\nimport App from './App';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}